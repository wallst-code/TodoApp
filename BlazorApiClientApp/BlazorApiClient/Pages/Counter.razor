@page "/counter"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo

<PageTitle>Counter</PageTitle>

<h1>ToDo List</h1>

@if (string.IsNullOrWhiteSpace(errorMessage) == false)
{
    <div class="h3 text-danger">@errorMessage</div>
}

<button class="btn btn-primary" @onclick="FetchTodos">Get ToDo List</button>

@if (todos is not null)
{
    @foreach (var t in todos)
    {
        @if (t.IsComplete)
        {
            <div class="h2">@t.Task (Completed)</div>
        }
        else
        {
            <div class="h2">@t.Task</div>
            <button class="btn btn-sm btn-primary" @onclick="() => CompleteTodo(t)">Complete</button>
        }
    }
}


@code {
    private List<TodoModel>? todos;
    private HttpClient? client;
    private string? errorMessage;

    private async void FetchTodos()
    {
        errorMessage = ""; // makes it so we have a refreashed value with each call.
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);
        // the request will send in a Bearer token with each request in the header.

        try
        {
            todos = await client.GetFromJsonAsync<List<TodoModel>>("Todos");
            // this adds the todo ** GetFromJsonAsync must be wrapped in a try-catch block.
            // make sure that your models match exactly what the json coming back is. 
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void CompleteTodo(TodoModel todo)
    {
        await client!.PutAsJsonAsync<string>($"Todos/{todo.Id}/Complete", "");
        // This is the endpoint for the backend API to mark a task as completed, there is no data to pass thus the empty "" parameter.
        todo.IsComplete = true; 
        // this updates the list and is less resource intensive, or we could call the FetchTodos().It does not call the DB, but in this case that is okay.

        await InvokeAsync(StateHasChanged);
    }
}
