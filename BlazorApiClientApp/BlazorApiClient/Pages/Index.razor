@page "/"
@using System.Net.Http.Json
@inject IHttpClientFactory factory
@inject TokenModel tokenInfo

<PageTitle>Index</PageTitle>

@if (isLoggedIn)
{
    <h1>You Are Logged In</h1>
    <button class="btn btn-danger" @onclick="LogOut">Log Out</button>
}
else
{
    <h1>Please Log In</h1>

    <EditForm Model="login" OnValidSubmit="HandleValidSubmit">
        <InputText @bind-Value="login.UserName" />
        <InputText type="password" @bind-Value="login.Password" />

        <button class="btn btn-success" type="submit">Log In </button>
    </EditForm>
}

@code {
    private AuthenticationModel login = new();
    private bool isLoggedIn = false;

    protected override void OnInitialized()
    {
        isLoggedIn = !string.IsNullOrWhiteSpace(tokenInfo.Token);
        // if the Token is null or white space then they are not logged in, but if not, then they are logged in. 
    }

    private async void HandleValidSubmit()
    {
        var client = factory.CreateClient("api");

        var info = await client.PostAsJsonAsync<AuthenticationModel>("Authentication/token", login);
        tokenInfo.Token = await info.Content.ReadAsStringAsync();
        isLoggedIn = true;
        await InvokeAsync(StateHasChanged); // this tells Blazor to redraw the page, because it cannot see async changes on its own. 
    }

    private void LogOut()
    {
        tokenInfo.Token = ""; // this overwrites the token and it is no longer there. 
        isLoggedIn = false;
    }
}
